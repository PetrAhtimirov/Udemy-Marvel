{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SinglePage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelServise","loading","request","error","clearError","process","setProcess","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_baseOffset","_transformCharacter","char","desc","description","substr","id","name","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","title","pageCount","price","prices","language","textObjects","getAllCharacters","offset","res","results","map","getCharacter","getCharacterByName","getCharacterComics","getAllComics","getComic","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","AppBanner","avengers","avengersLogo","SinglePage","_ref","dataType","useParams","setData","useMarvelService","useEffect","updateData","then","onDataLoaded"],"mappings":"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","file":"static/js/6.4219e23c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt=\"error\" />\n    )\n}\n\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\n\nconst useMarvelServise = () => {\n    const { loading, request, error, clearError, process, setProcess } =\n        useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=6cd0b5da891a48a4d3f5ae350908e21c';\n    const _baseOffset = 320;\n\n    const _transformCharacter = (char) => {\n        let desc = char.description;\n        if (desc === '') {\n            desc = 'There is no description for this character';\n        }\n        if (desc.length > 160) {\n            desc = `${desc.substr(0, 160)}...`;\n        }\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: desc,\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        };\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} p.`\n                : 'No information about the number of pages',\n            price: comics.prices[0].price\n                ? `${comics.prices[0].price}$`\n                : 'Not available',\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\n            language: comics.textObjects.language || 'en-us',\n        };\n    };\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(\n            `${_apiBase}characters?name=${name}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacterComics = async (id) => {\n        const res = await request(\n            `${_apiBase}characters/${id}/comics?orderBy=modified&${_apiKey}`\n        );\n        return res.data.results.map(_transformComics);\n    };\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(\n            `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    return {\n        loading,\n        error,\n        clearError,\n        process,\n        setProcess,\n        getAllCharacters,\n        getCharacter,\n        getCharacterByName,\n        getCharacterComics,\n        getAllComics,\n        getComic,\n    };\n};\n\nexport default useMarvelServise;\n","import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(\n        async (\n            url,\n            method = 'GET',\n            body = null,\n            headers = { 'Content-Type': 'application/json' }\n        ) => {\n            setLoading(true);\n            setProcess('loading');\n\n            try {\n                const response = await fetch(url, { method, body, headers });\n\n                if (!response.ok) {\n                    throw new Error(\n                        `Could not fetch ${url}, status: ${response.status}`\n                    );\n                }\n\n                const data = await response.json();\n\n                setLoading(false);\n                return data;\n            } catch (e) {\n                setLoading(false);\n                setError(e.message);\n                setProcess('error');\n                throw e;\n            }\n        },\n        []\n    );\n\n    const clearError = useCallback(() => {\n        setError(null);\n        setProcess('loading');\n    }, []);\n    return { loading, request, error, clearError, process, setProcess };\n};\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton />;\n        case 'loading':\n            return <Spinner />;\n        case 'confirmed':\n            return <Component data={data} />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n};\n\nexport default setContent;\n","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport AppBanner from '../appBanner/AppBanner';\nimport setContent from '../../utils/setContent';\n\nconst SinglePage = ({ Component, dataType }) => {\n    const { id } = useParams();\n    const [data, setData] = useState(null);\n    const { getComic, getCharacter, clearError, process, setProcess } =\n        useMarvelService();\n\n    useEffect(() => {\n        updateData();\n    }, [id]);\n\n    const updateData = () => {\n        clearError();\n\n        switch (dataType) {\n            case 'comic':\n                getComic(id)\n                    .then(onDataLoaded)\n                    .then(() => setProcess('confirmed'));\n                break;\n            case 'character':\n                getCharacter(id)\n                    .then(onDataLoaded)\n                    .then(() => setProcess('confirmed'));\n        }\n    };\n\n    const onDataLoaded = (data) => {\n        setData(data);\n    };\n\n    return (\n        <>\n            <AppBanner />\n            {setContent(process, Component, data)}\n        </>\n    );\n};\n\nexport default SinglePage;\n"],"sourceRoot":""}