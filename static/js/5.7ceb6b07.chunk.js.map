{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelServise","loading","request","error","clearError","process","setProcess","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_baseOffset","_transformCharacter","char","desc","description","substr","id","name","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","title","pageCount","price","prices","language","textObjects","getAllCharacters","offset","res","results","map","getCharacter","getCharacterByName","getCharacterComics","getAllComics","getComic","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","_ref","imageClasses","href","RandomChar","setChar","useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","i","tabIndex","ref","el","onCharSelected","onKeyDown","key","preventDefault","errorMessage","spinner","disabled","slice","Link","to","CharInfo","charId","CharSearchForm","searchedChar","setSearchedChar","Formik","initialValues","charName","validationSchema","Yup","required","validateOnChange","validateOnBlur","onSubmit","onSearch","Form","htmlFor","Field","type","placeholder","validate","value","FormikError","component","ErrorBoundary","constructor","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","content"],"mappings":"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","file":"static/js/5.7ceb6b07.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt=\"error\" />\n    )\n}\n\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\n\nconst useMarvelServise = () => {\n    const { loading, request, error, clearError, process, setProcess } =\n        useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=6cd0b5da891a48a4d3f5ae350908e21c';\n    const _baseOffset = 320;\n\n    const _transformCharacter = (char) => {\n        let desc = char.description;\n        if (desc === '') {\n            desc = 'There is no description for this character';\n        }\n        if (desc.length > 160) {\n            desc = `${desc.substr(0, 160)}...`;\n        }\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: desc,\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        };\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} p.`\n                : 'No information about the number of pages',\n            price: comics.prices[0].price\n                ? `${comics.prices[0].price}$`\n                : 'Not available',\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\n            language: comics.textObjects.language || 'en-us',\n        };\n    };\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(\n            `${_apiBase}characters?name=${name}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacterComics = async (id) => {\n        const res = await request(\n            `${_apiBase}characters/${id}/comics?orderBy=modified&${_apiKey}`\n        );\n        return res.data.results.map(_transformComics);\n    };\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(\n            `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    return {\n        loading,\n        error,\n        clearError,\n        process,\n        setProcess,\n        getAllCharacters,\n        getCharacter,\n        getCharacterByName,\n        getCharacterComics,\n        getAllComics,\n        getComic,\n    };\n};\n\nexport default useMarvelServise;\n","import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(\n        async (\n            url,\n            method = 'GET',\n            body = null,\n            headers = { 'Content-Type': 'application/json' }\n        ) => {\n            setLoading(true);\n            setProcess('loading');\n\n            try {\n                const response = await fetch(url, { method, body, headers });\n\n                if (!response.ok) {\n                    throw new Error(\n                        `Could not fetch ${url}, status: ${response.status}`\n                    );\n                }\n\n                const data = await response.json();\n\n                setLoading(false);\n                return data;\n            } catch (e) {\n                setLoading(false);\n                setError(e.message);\n                setProcess('error');\n                throw e;\n            }\n        },\n        []\n    );\n\n    const clearError = useCallback(() => {\n        setError(null);\n        setProcess('loading');\n    }, []);\n    return { loading, request, error, clearError, process, setProcess };\n};\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton />;\n        case 'loading':\n            return <Spinner />;\n        case 'confirmed':\n            return <Component data={data} />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n};\n\nexport default setContent;\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const { getCharacter, clearError, process, setProcess } =\n        useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    };\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!\n                    <br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">Or choose another one</p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img\n                    src={mjolnir}\n                    alt=\"mjolnir\"\n                    className=\"randomchar__decoration\"\n                />\n            </div>\n        </div>\n    );\n};\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data;\n\n    let imageClasses = 'randomchar__img';\n    if (\n        thumbnail ===\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n    ) {\n        imageClasses += ' not_found';\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                src={thumbnail}\n                alt=\"Random character\"\n                className={imageClasses}\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelServise from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(700);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelServise();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset).then(onCharListLoaded);\n    };\n\n    const onCharListLoaded = (newCharList) => {\n        setCharList((charList) => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset((offset) => offset + 9);\n        setCharEnded(newCharList.length < 9);\n    };\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach((item) =>\n            item.classList.remove('char__item__selected')\n        );\n        itemRefs.current[id].classList.add('char__item__selected');\n        itemRefs.current[id].focus();\n    };\n\n    const items = (\n        <ul className=\"char__grid\">\n            {charList.map((item, i) => {\n                return (\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        key={item.id}\n                        ref={(el) => (itemRefs.current[i] = el)}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyDown={(e) => {\n                            if (e.key === ' ' || e.key === 'Enter') {\n                                e.preventDefault();\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}\n                    >\n                        <img src={item.thumbnail} alt={item.name} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ display: charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n};\n\nCharList.propTypes = {\n    charId: PropTypes.number,\n};\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {\n        getCharacter,\n        getCharacterComics,\n        clearError,\n        process,\n        setProcess,\n    } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = async () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n\n        let char = await getCharacter(charId);\n        char.comics = await getCharacterComics(charId);\n        onCharLoaded(char);\n        setProcess('confirmed');\n    };\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    let imageClasses = '';\n    if (\n        thumbnail ===\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n    ) {\n        imageClasses += ' not_found';\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} className={imageClasses} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.slice(0, 10).map((item, i) => {\n                    return (\n                        <li key={i} className=\"char__comics-item\">\n                            <Link to={`/comics/${item.id}`}>{item.title}</Link>\n                        </li>\n                    );\n                })}\n                {comics.length === 0\n                    ? 'There is no comics with this character'\n                    : null}\n            </ul>\n        </>\n    );\n};\n\nCharInfo.propTypes = {\n    onCharSelected: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikError } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelServise from '../../services/MarvelService';\n\nimport './charSearchForm.scss';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return null;\n        case 'loading':\n            return <Spinner />;\n        case 'confirmed':\n            return <Component data={data} />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n};\n\nconst CharSearchForm = () => {\n    const [searchedChar, setSearchedChar] = useState({});\n\n    const { getCharacterByName, clearError, process, setProcess } =\n        useMarvelServise();\n\n    const onSearch = async (charName) => {\n        clearError();\n\n        const char = (await getCharacterByName(charName))[0];\n        setSearchedChar(char);\n        setProcess('confirmed');\n    };\n\n    const results = () =>\n        searchedChar ? (\n            searchedChar.name ? (\n                <div className=\"char__search-wrapper\">\n                    <div className=\"char__search-success\">\n                        There is! Visit {searchedChar.name} page?\n                    </div>\n                    <Link\n                        to={`/characters/${searchedChar.id}`}\n                        className=\"button button__secondary\"\n                    >\n                        <div className=\"inner\">To page</div>\n                    </Link>\n                </div>\n            ) : null\n        ) : (\n            <div className=\"char__search-error\">\n                The character was not found. Check the name and try again\n            </div>\n        );\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues={{ charName: '' }}\n                validationSchema={Yup.object({\n                    charName: Yup.string().required('Required field!'),\n                })}\n                validateOnChange={false}\n                validateOnBlur={false}\n                onSubmit={({ charName }) => onSearch(charName)}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">\n                        Or find a character by name:\n                    </label>\n                    <div className=\"char__search-wrapper\">\n                        <Field\n                            id=\"charName\"\n                            name=\"charName\"\n                            type=\"text\"\n                            placeholder=\"Enter name\"\n                            validate={(value) => {\n                                if (value === '') {\n                                    setSearchedChar({});\n                                }\n                            }}\n                        />\n                        <button type=\"submit\" className=\"button button__main\">\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikError\n                        component=\"div\"\n                        className=\"char__search-error\"\n                        name=\"charName\"\n                    />\n                </Form>\n            </Formik>\n            {setContent(process, results)}\n        </div>\n    );\n};\n\nexport default CharSearchForm;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport RandomChar from '../randomChar/RandomChar';\nimport CharList from '../charList/CharList';\nimport CharInfo from '../charInfo/CharInfo';\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    };\n\n    return (\n        <>\n            <Helmet>\n                <meta name=\"description\" content=\"Marvel information portal\" />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm />\n                    </ErrorBoundary>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default MainPage;\n"],"sourceRoot":""}